// Code generated by protoc-gen-go-gin. DO NOT EDIT.

package proto

import (
	gin "github.com/gin-gonic/gin"
	http "net/http"
)

type InventoryHttpServer struct {
	server InventoryServer
	router gin.IRouter
}

func RegisterInventoryServerHTTPServer(srv InventoryServer, r gin.IRouter) {
	s := InventoryHttpServer{
		server: srv,
		router: r,
	}
	s.RegisterService()
}

func (s *InventoryHttpServer) SetInv_0(c *gin.Context) {
	var in GoodsInvInfo

	if err := c.ShouldBindJSON(&in); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	out, err := s.server.SetInv(c, &in)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, out)
}

func (s *InventoryHttpServer) InvDetail_0(c *gin.Context) {
	var in GoodsInvInfo

	if err := c.ShouldBindJSON(&in); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	out, err := s.server.InvDetail(c, &in)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, out)
}

func (s *InventoryHttpServer) Sell_0(c *gin.Context) {
	var in SellInfo

	if err := c.ShouldBindJSON(&in); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	out, err := s.server.Sell(c, &in)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, out)
}

func (s *InventoryHttpServer) Reback_0(c *gin.Context) {
	var in SellInfo

	if err := c.ShouldBindJSON(&in); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	out, err := s.server.Reback(c, &in)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, out)
}

func (s *InventoryHttpServer) RegisterService() {

	s.router.Handle("POST", "", s.SetInv_0)

	s.router.Handle("POST", "", s.InvDetail_0)

	s.router.Handle("POST", "", s.Sell_0)

	s.router.Handle("POST", "", s.Reback_0)

}
