// Code generated by protoc-gen-gin. DO NOT EDIT.

package proto

import (
	gin "github.com/gin-gonic/gin"
	http "net/http"
)

type OrderHttpServer struct {
	server OrderServer
	router gin.IRouter
}

func RegisterOrderServerHTTPServer(srv OrderServer, r gin.IRouter) {
	s := OrderHttpServer{
		server: srv,
		router: r,
	}
	s.RegisterService()
}

func (s *OrderHttpServer) CartItemList_0(c *gin.Context) {
	var in UserInfo

	if err := c.ShouldBindJSON(&in); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	out, err := s.server.CartItemList(c, &in)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, out)
}

func (s *OrderHttpServer) CreateCartItem_0(c *gin.Context) {
	var in CartItemRequest

	if err := c.ShouldBindJSON(&in); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	out, err := s.server.CreateCartItem(c, &in)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, out)
}

func (s *OrderHttpServer) UpdateCartItem_0(c *gin.Context) {
	var in CartItemRequest

	if err := c.ShouldBindJSON(&in); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	out, err := s.server.UpdateCartItem(c, &in)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, out)
}

func (s *OrderHttpServer) DeleteCartItem_0(c *gin.Context) {
	var in CartItemRequest

	if err := c.ShouldBindJSON(&in); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	out, err := s.server.DeleteCartItem(c, &in)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, out)
}

func (s *OrderHttpServer) CreateOrder_0(c *gin.Context) {
	var in OrderRequest

	if err := c.ShouldBindJSON(&in); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	out, err := s.server.CreateOrder(c, &in)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, out)
}

func (s *OrderHttpServer) CreateOrderCom_0(c *gin.Context) {
	var in OrderRequest

	if err := c.ShouldBindJSON(&in); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	out, err := s.server.CreateOrderCom(c, &in)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, out)
}

func (s *OrderHttpServer) SubmitOrder_0(c *gin.Context) {
	var in OrderRequest

	if err := c.ShouldBindJSON(&in); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	out, err := s.server.SubmitOrder(c, &in)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, out)
}

func (s *OrderHttpServer) OrderList_0(c *gin.Context) {
	var in OrderFilterRequest

	if err := c.ShouldBindJSON(&in); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	out, err := s.server.OrderList(c, &in)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, out)
}

func (s *OrderHttpServer) OrderDetail_0(c *gin.Context) {
	var in OrderRequest

	if err := c.ShouldBindJSON(&in); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	out, err := s.server.OrderDetail(c, &in)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, out)
}

func (s *OrderHttpServer) UpdateOrderStatus_0(c *gin.Context) {
	var in OrderStatus

	if err := c.ShouldBindJSON(&in); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	out, err := s.server.UpdateOrderStatus(c, &in)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, out)
}

func (s *OrderHttpServer) RegisterService() {

	s.router.Handle("POST", "", s.CartItemList_0)

	s.router.Handle("POST", "", s.CreateCartItem_0)

	s.router.Handle("POST", "", s.UpdateCartItem_0)

	s.router.Handle("POST", "", s.DeleteCartItem_0)

	s.router.Handle("POST", "", s.CreateOrder_0)

	s.router.Handle("POST", "", s.CreateOrderCom_0)

	s.router.Handle("POST", "", s.SubmitOrder_0)

	s.router.Handle("POST", "", s.OrderList_0)

	s.router.Handle("POST", "", s.OrderDetail_0)

	s.router.Handle("POST", "", s.UpdateOrderStatus_0)

}
